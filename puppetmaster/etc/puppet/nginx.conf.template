# pidfile is not necessary since we start in foreground.
pid /dev/null;

# Log to stderr so `docker logs' captures output.
error_log stderr warn;

# To-do: configure this dynamically based on CPU count.
worker_processes ${NGINX_WORKER_PROCESSES};

events {
    worker_connections  1024;
}

http {
    # Serve correct file types.
    include      /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Disable this check.
    # Avoids error seen on windows hosts:
    #   413 Request Entity Too Large
    client_max_body_size 0;

    # README!!
    #
    # Use https://securityheaders.io/?q=http%3A%2F%2Flogin.ISE.com
    # to evaluate http security headers for this configuration.

    # CSP and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
    # tell the browser that it can only download content from the domains we explicitly allow
    # https://scotthelme.co.uk/content-security-policy-an-introduction/
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    add_header Content-Security-Policy "default-src 'self'" always;

    # Don't allow the browser to render our pages inside a frame or iframe
    # thus avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-frame-options
    # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Enable the XSS filter built into most recent web browsers.
    # It's usually enabled by default anyway, but this header
    # re-enables the filter if it was disabled by the user.
    # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-xss-protection
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-Xss-Protection "1; mode=block" always;

    # Prevent Google Chrome and Internet Explorer from trying
    # to mime-sniff the content-type of a response away from
    # the one being declared by the server.
    # It reduces exposure to drive-by downloads and the risks
    # of user uploaded content that, with clever naming,
    # could be treated as a different content-type, like an executable.
    # https://scotthelme.co.uk/hardening-your-http-response-headers/#x-content-type-options
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    # IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
    # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
    # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
    add_header X-Content-Type-Options "nosniff" always;

    # Prevent Slowloris-style attacks.
    # https://en.wikipedia.org/wiki/Slowloris_(software)
    # https://calomel.org/nginx.html
    client_body_timeout      5s; # maximum time between packets the client can pause when sending nginx any data
    client_header_timeout    5s; # maximum time the client has to send the entire header to nginx
    keepalive_timeout       75s; # timeout which a single keep-alive client connection will stay open
    send_timeout            15s; # maximum time between packets nginx is allowed to pause when sending the client data

    # General Options
    # https://calomel.org/nginx.html
    charset                   utf-8;   # adds the line "Content-Type" into response-header, same as "source_charset"
    ignore_invalid_headers    on;
    keepalive_requests        50;      # number of requests per connection, does not affect SPDY
    keepalive_disable         none;    # allow all browsers to use keepalive connections
    max_ranges                1;       # allow a single range header for resumed downloads and to stop large range header DoS attacks
    msie_padding              off;
    open_file_cache           max=1000 inactive=2h;
    open_file_cache_errors    on;
    open_file_cache_min_uses  1;
    open_file_cache_valid     1h;
    output_buffers            1 512;
    postpone_output           1440;    # postpone sends to match our machine's MSS
    read_ahead                512K;    # kernel read head set to the output_buffers
    recursive_error_pages     on;
    reset_timedout_connection on;      # reset timed out connections freeing ram
    sendfile                  on;      # on for decent direct disk I/O
    server_tokens             off;     # version number in error pages
    server_name_in_redirect   off;     # if off, nginx will use the requested Host header
    source_charset            utf-8;   # same value as "charset"
    tcp_nodelay               on;      # Nagle buffering algorithm, used for keepalive only
    tcp_nopush                off;

    upstream puppetmaster_unicorn {
        # Always retry backends that may have had workers SIGKILL-ed due to unicorn worker timeouts.
        # See also unicorn.conf
        server unix:/var/run/puppet/puppetmaster_unicorn.sock fail_timeout=0;
    }

    server {
        location / {
            proxy_pass http://puppetmaster_unicorn;
            proxy_redirect off;
        }

        listen       8140 ssl default_server;
        server_name  puppet.inf.ise.com ic-kix01.inf.ise.com ic-kix02.inf.ise.com ic-kix03.inf.ise.com ic-kix04.inf.ise.com;

        # Log to stdout so `docker logs' captures output.
        access_log stdout;

        # Configure SSL.
        # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        ssl                        on;
        ssl_session_timeout        5m;
        ssl_certificate            /var/lib/puppet/ssl/certs/puppet.inf.ise.com.pem;
        ssl_certificate_key        /var/lib/puppet/ssl/private_keys/puppet.inf.ise.com.pem;
        ssl_prefer_server_ciphers  on;
        ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers                ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS;
        ssl_crl                    /var/lib/puppet/ssl/ca/ca_crl.pem;
        ssl_client_certificate     /var/lib/puppet/ssl/certs/ca.pem;
        ssl_verify_client          optional;
        ssl_verify_depth           1;

        root /usr/share/empty;

        proxy_set_header           Host $host;
        proxy_set_header           X-Real-IP $remote_addr;
        proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header           X-Client-Verify $ssl_client_verify;
        proxy_set_header           X-Client-DN $ssl_client_s_dn;
        proxy_set_header           X-SSL-Issuer $ssl_client_i_dn;
        proxy_read_timeout         120;
    }
}
