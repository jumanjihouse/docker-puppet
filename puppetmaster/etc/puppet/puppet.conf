[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl

    # We use dynamic environments and store hiera.yaml in the repo.
    # Each subdir of /opt/puppet/environments is an environment (git branch).
    environmentpath = /opt/puppet/environments

[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuratiion.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is '$confdir/classes.txt'.
    classfile = $vardir/classes.txt

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$confdir/localconfig'.
    localconfig = $vardir/localconfig

[master]
    # We store every report in two, independetly verifiable places:
    #
    # * locally on the puppet master, and
    # * centrally on the puppetdb.
    reports = store,puppetdb

    # Too bad puppet3 does not yet support per-environment `hiera_config`.
    hiera_config = /opt/puppet/environments/production/hiera.yaml

    digest_algorithm = md5
    pluginsync = true
    ssl_client_header = SSL_CLIENT_S_DN
    ssl_client_verify_header = SSL_CLIENT_VERIFY
    autosign = true
    certname = puppet.inf.ise.com
    dns_alt_names = ic-kix01.inf.ise.com,ic-kix02.inf.ise.com,ic-kix03.inf.ise.com,ic-kix04.inf.ise.com
    parser = current

    # storeconfigs: We explicitly disable stored configs and do not use
    # exported resources because we consider it an anti-pattern to trust
    # a host's current resources to be an input to other configurations.
    # Also, using exported resources to configure other services means
    # the puppetdb becomes a second source of truth that must be available
    # and yet cannot deliver the level of record-level integrity that we
    # demand via cryptographic hashes of the data. Additionally, stored
    # configs and exported resources require manual, non-reproducible
    # action to purge in case a node is deactivated. Here's a quote from
    # http://docs.puppetlabs.com/puppetdb/2.1/maintain_and_tune.html
    #
    # > Deactivating a node does not remove (e.g. ensure => absent)
    # > exported resources from other systems; it only stops managing
    # > those resources. If you want to actively destroy resources from
    # > deactivated nodes, you will probably need to purge that resource
    # > type using the resources metatype. Note that some types cannot
    # > be purged (e.g. ssh authorized keys), and several others usually
    # > should not be purged (e.g. users).
    storeconfigs = false
