working_directory "/etc/puppet"
pid "/var/run/puppet/puppetmaster_unicorn.pid"

# Each worker process serves exactly one client at a time.
worker_processes ${UNICORN_WORKER_PROCESSES}

# backlog == number of clients
# net.core.somaxconn sysctl defaults to 128
# You must change it for backlog to be effective.
listen '/var/run/puppet/puppetmaster_unicorn.sock', :backlog => ${UNICORN_WORKER_PROCESSES}

# Force-kill (via SIGKILL) any worker whose request/app.call/response
# cycle takes longer than this many seconds.
# This timeout is enforced by the master process itself and
# not subject to the scheduling limitations by the worker process.
timeout 120

# Preload puppet master before forking worker processes.
# This allows memory savings when using a copy-on-write-friendly GC
# but can cause bad things to happen when resources like sockets
# are opened at load time by the unicorn master process and
# shared by multiple children.
preload_app true
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

# Properly close/reopen sockets since we use preload_app.
before_fork do |server, worker|
  old_pid = "#{server.config[:pid]}.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end
